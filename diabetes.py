# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jTGOw8sIO1D3OgGFT9a2h50qO4nHQYv6
"""

import pandas as pd
import numpy as np
from google.colab import files
import io
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier, export_text, export_graphviz
import pydotplus
from IPython.display import Image

diabetes_data = pd.read_csv('/content/drive/MyDrive/ML Lab/diabetes.csv',names=['pregnencies','glucose','blood pressure','skin thickness','insulin','bmi','DPF','age','outcome'])
print(diabetes_data)

x = diabetes_data.drop(diabetes_data.columns[8], axis=1)
y = diabetes_data[diabetes_data.columns[8]]
# print(x)
# print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=None)
print(x_train)
print(x_test)
print(y_train)
print(y_test)

gnb = GaussianNB()
gnb.fit(x_train, y_train)
y_pred_gnb = gnb.predict(x_test)
# print(y_pred_gnb)

mnb = MultinomialNB()
mnb.fit(x_train, y_train)
y_pred_mnb = mnb.predict(x_test)
print(y_pred_mnb)

bnb = BernoulliNB()
bnb.fit(x_train, y_train)
y_pred_bnb = bnb.predict(x_test)
print(y_pred_bnb)

accuracy_gnb = accuracy_score(y_test, y_pred_gnb)
print("Gaussian Naive Bayes:")
print(f'Accuracy: {accuracy_gnb:.2f}')
print(classification_report(y_test, y_pred_gnb))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_gnb))

accuracy_mnb = accuracy_score(y_test, y_pred_mnb)
print("Multinomial Naive Bayes:")
print(f'Accuracy: {accuracy_mnb:.2f}')
print(classification_report(y_test, y_pred_mnb))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_mnb))

accuracy_bnb = accuracy_score(y_test, y_pred_bnb)
print("Bernoulli Naive Bayes:")
print(f'Accuracy: {accuracy_bnb:.2f}')
print(classification_report(y_test, y_pred_bnb))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_bnb))

accuracy_bnb = accuracy_score(y_test, y_pred_bnb)
print("Bernoulli Naive Bayes:")
print(f'Accuracy: {accuracy_bnb:.2f}')
print(classification_report(y_test, y_pred_bnb,labels=np.unique(y_pred_bnb)))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_bnb))

dtc = DecisionTreeClassifier(criterion='gini')
dtc.fit(x_train, y_train)
y_pred_dtc = dtc.predict(x_test)

accuracy_dtc = accuracy_score(y_test, y_pred_dtc)
print("Decision Tree Classifier:")
print(f'Accuracy: {accuracy_dtc:.2f}')
print(classification_report(y_test, y_pred_dtc))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_dtc))

dot_data = export_graphviz(dtc, out_file=None, feature_names=x.columns,
                           class_names=y.unique(),filled=False, rounded=False, special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data)

decision_tree_image_path = "diabetes_tree.png"
graph.write_png(decision_tree_image_path)

Image(decision_tree_image_path)

"""new copied after this

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier, export_text, export_graphviz
import pydotplus
from IPython.display import Image

# Load the diabetes dataset
diabetis_data = pd.read_csv('/content/drive/MyDrive/ML Lab/diabetes.csv')
# print(diabetis_data)

x = diabetis_data.drop('Outcome', axis=1)
y = diabetis_data['Outcome']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.5, random_state=30)

# Decision Tree Classifier
dtc = DecisionTreeClassifier(criterion='entropy')  # You can also use 'entropy' for criterion
dtc.fit(X_train, y_train)
y_pred_dtc = dtc.predict(X_test)

# Evaluate Decision Tree Classifier
accuracy_dtc = accuracy_score(y_test, y_pred_dtc)
print("Decision Tree Classifier:")
print(f'Accuracy: {accuracy_dtc:.2f}')
print(classification_report(y_test, y_pred_dtc))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_dtc))

dot_data = export_graphviz(dtc, out_file=None, feature_names=X.columns, class_names=str(y.unique()),
                           filled=True, rounded=True, special_characters=False)
graph = pydotplus.graph_from_dot_data(dot_data)

# Save the decision tree image
decision_tree_image_path = "decision_tree.png"
graph.write_png(decision_tree_image_path)

# Display the decision tree image
Image(decision_tree_image_path)

# Gaussian Naive Bayes Classifier
gnb = GaussianNB()
gnb.fit(X_train, y_train)
y_pred_gnb = gnb.predict(X_test)

# Multinomial Naive Bayes Classifier
mnb = MultinomialNB(alpha=1.2,fit_prior=True,class_prior=None)
mnb.fit(X_train, y_train)
y_pred_mnb = mnb.predict(X_test)

# Bernoulli Naive Bayes Classifier
bnb = BernoulliNB(alpha=1.5,binarize=1.7,fit_prior=True,class_prior=None)
bnb.fit(X_train, y_train)
y_pred_bnb = bnb.predict(X_test)

# Evaluate Gaussian Naive Bayes
accuracy_gnb = accuracy_score(y_test, y_pred_gnb)
print("Gaussian Naive Bayes:")
print(f'Accuracy: {accuracy_gnb:.2f}')
print(classification_report(y_test, y_pred_gnb))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_gnb))

cm=confusion_matrix(y_test,y_pred_gnb)
sns.heatmap(cm,annot=True,fmt="d",cmap="coolwarm")
plt.show()

# Evaluate Multinomial Naive Bayes
accuracy_mnb = accuracy_score(y_test, y_pred_mnb)
print("Multinomial Naive Bayes:")
print(f'Accuracy: {accuracy_mnb:.2f}')
print(classification_report(y_test, y_pred_mnb))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_mnb))

cm1=confusion_matrix(y_test,y_pred_mnb)
sns.heatmap(cm1,annot=True,fmt="d",cmap="coolwarm")
plt.show()

# Evaluate Bernoulli Naive Bayes
accuracy_bnb = accuracy_score(y_test, y_pred_bnb)
print("Bernoulli Naive Bayes:")
print(f'Accuracy: {accuracy_bnb:.2f}')
print(classification_report(y_test, y_pred_bnb))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_bnb))

cm2=confusion_matrix(y_test,y_pred_bnb)
sns.heatmap(cm2,annot=True,fmt="d",cmap="coolwarm")
plt.show()

